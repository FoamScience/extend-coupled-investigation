/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     5.0                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  | For copyright notice see file Copyright         |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSolution;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

pTolerance 0.1;
UTolerance 0.1;

solvers
{
    p
    {
        solver           GAMG;
        preconditioner   Cholesky;
        tolerance       #calc "$pTolerance*1e-6";
        relTol           0;

        smoother         GaussSeidel;

        cacheAgglomeration true;

        nCellsInCoarsestLevel 20;
        agglomerator     faceAreaPair;
        mergeLevels      1;
    }

    U
    {
        solver           smoothSolver;
        smoother         GaussSeidel;
        nSweeps          2;
        tolerance       #calc "$UTolerance*1e-6";
        relTol           0.1;
    }

    k
    {
        solver           smoothSolver;
        smoother         GaussSeidel;
        nSweeps          2;
        tolerance        1e-7;
        relTol           0.1;
    }

    epsilon
    {
        solver           smoothSolver;
        smoother         GaussSeidel;
        nSweeps          2;
        tolerance        1e-7;
        relTol           0.1;
    }
}

SIMPLE
{
    nNonOrthogonalCorrectors 0;
    pRefCell 0;
    pRefValue 0;
}

relaxationFactors
{
    p               0.3;
    U               0.5;
    k               0.5;
    epsilon         0.5;
}

blockSolver {
    convergence 1e-6;

    pRefCell 0;
    pRefValue 0;
}

fieldBounds
{
    // turbulence fields
    k           lowerBound 1e-10;
    epsilon     lowerBound 1e-10;
    omega       lowerBound 1e-10;
    nut         lowerBound 0;

    // optional: clamp pressure and velocity if solver requires
    p           -1e10 1e10;
    U            100;
}

potentialFlow {
}

// ************************************************************************* //
